name: Bygg og push Docker image

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'LICENCE'
      - 'CODEOWNERS'
      - '.gitignore'
      - '.github/workflows/alerts.yaml'
      - '.github/workflows/snyk.yaml'
      - '.nais/alerterator-dev.yaml'
      - '.nais/alerterator-prod.yaml'
env:
  IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}
  LATEST_IMAGE: ghcr.io/${{ github.repository }}:latest
  GITHUB_USERNAME: x-access-token
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  bygg-og-push-docker-image:
    name: Bygg/test og push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Sjekker ut repo
        uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache gradle artifakter
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Bygg og test shadowJar
        run: ./gradlew test shadowJar
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}

      - name: Bygg docker image
        uses: docker/setup-buildx-action@v2

      - name: Logger p√• Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Tag image latest
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.LATEST_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max